
include "libs/settings.tis";
include "libs/progress.tis";

include "config.tis";
include "debug.tis";
// include "updates.tis";
// include "login.tis"
// include "lobby.tis"


const Launcher_State_UpdateProgram = 0;
const Launcher_State_UpdateResources = 1;
const Launcher_State_Main = 2; //select player model and map to play.
const Launcher_State_ConnectToGame = 3;
//const Launcher_State_Main = 1; //select player model and map to play.


 //const tabs = $(div#tabs);
 //const frameContent = $(frame#content);
 const footer = $(footer);

 var currentViewId = null;
 var currentViewDoc = null;
 var currentLabel = null;
 
var currentFrameId = "";



var launcherState = Launcher_State_UpdateProgram;

$(body).on("on-change-state", function (e) {
	launcherState = e.data;
	if (e.data == Launcher_State_UpdateProgram)
	{
		var parent = $(#LauncherFooterBody);
		if (parent.length > 0)
			parent.clear();
		parent.$append({Progress_Create("UpdateProgramProgress")});
	}
	if (e.data == Launcher_State_UpdateResources)
	{
		var parent = $(#LauncherFooterBody);
		if (parent.length > 0)
			parent.clear();
		parent.$append({Progress_Create("UpdateResourcesProgress")});
	}
});


$(body).on("on-progress", function (e) {
	
	//Debug_Println(String.$(on-progress: {e.data["progress"]}));
	Progress_Set(e.data["progress"], e.data["text"]);
	// switch (e.data) {
		// case #UpdatesFrame:
		// {			
			// setFrame(#LoginFrame);
			// break;
		// }
		// case #LoginFrame:
		// {
			// setFrame(#LobbyFrame);
			// break;
		// }
	// }
});


$(body).on("frame-finished", function (e) {
	
	Debug_Println(String.$({e.data}: finished));
	switch (e.data) {
		case #UpdatesFrame:
		{			
			setFrame(#LoginFrame);
			break;
		}
		case #LoginFrame:
		{
			setFrame(#LobbyFrame);
			break;
		}
	}
	
});


function Common_SetWindowSize(width, height)
{
    
    var (sx,sy,sw,sh) = View.screenBox(0,#workarea,#rectw);
    
    var w = self.toPixels(width, #width);
    var h = self.toPixels(height, #height);
    
    view.move( sx + (sw - w) / 2, sy + (sh - h) / 2, w,h, true );
	
}

function self.ready() 
{
	//view.isResizeable = false;
	
	if( !view.api && view.nativeApi)
	  view.api = view.nativeApi(); 
	  
	Settings.restore();
	
	view.settings = Settings.fetch();


	
	Common_SetWindowSize(Screen_Width, Screen_Height);
	
	

	//Set Progress position
	// $(#RandomProgress).style#left= Screen_Width/2 - $(#RandomProgress).style#width;
	// $(#RandomProgress).style#top= Screen_Height/2 - $(#RandomProgress).style#height;
	$(#RandomProgress).style#left= Screen_Width - $(#RandomProgress).style#width - 70;
	$(#RandomProgress).style#top= $(#RandomProgress).style#height + 28;
	

	$(body).sendEvent("on-change-state", Launcher_State_UpdateProgram);

	//Test Interface
	if (!cfgIsNative)
	{
		var progUpdateProgress = 0;
		self.timer(100ms, function() {
			if (launcherState == Launcher_State_UpdateProgram)
			{
				progUpdateProgress = progUpdateProgress + 1;
				if (progUpdateProgress > 100) 
				{
					progUpdateProgress = 0;
					//launcherState = Launcher_State_UpdateProgram;
					$(body).sendEvent("on-change-state", Launcher_State_UpdateResources);
					return true;
				}
				$(body).postEvent("on-progress", {"progress": progUpdateProgress, "text": "Обновление программы (1Мб из 10Мб / 4кб/сек)"});
			}
			if (launcherState == Launcher_State_UpdateResources)
			{
				progUpdateProgress = progUpdateProgress + 1;
				if (progUpdateProgress > 100) 
				{
					//launcherState = Launcher_State_UpdateProgram;
					$(body).sendEvent("on-change-state", Launcher_State_UpdateResources);
					return true;
				}
				$(body).postEvent("on-progress", {"progress": progUpdateProgress, "text": "Загрузка 'pak0.pk3' (1Мб из 70Мб / 4кб/сек)"});
			}
			return true;
		});			
	}


	//setFrame("UpdatesFrame");
	
	
	// self.timer(1000ms, function() {
				// UpdatesDo();
				// LoginDo();
				// //LobbyDo();
				// return true; // Repeat again!
	 // });	



	//view.msgbox(#alert,  false);
	//var needCheckUpdates = true; 
	
	//selectView("updates/updates");
	/*pathname = dbPathFromArgs() || settings.dbpath || System.path(#USER_DOCUMENTS,DBNAME);
	if(checkDatabase(pathname)) 
	{
	  if( View.db = openDatabase(pathname) ) {
		view.load(self.url("main.htm")); 
		return;
	  }
	}
	var body = $(body);
	body.attributes.addClass("presented");
	body.value = {
	  name: Sciter.userName(),
	  defloc: pathname.trim()
	};*/
}


function setFrame(frameId)
{
	currentFrameId = frameId;
	for(var frameItem in $$(.frame)) {
		if (frameId != frameItem.id)
		{
			frameItem.style#visibility = "collapse";
		}
		else
		{
			frameItem.style#visibility = "visible";		
			frameItem.postEvent("show");
		}
		
 // to hide and
    // toolbarItem.state.expanded = true; // to show
	}
	return "OK";
}

 // function selectView(viewId) {
   // if( currentLabel )
	 // currentLabel.state.checked = false; // deselect previous

   // frameContent.load(viewId + ".htm");
   // //currentLabel = $(#tabs > label#{viewId});
   // //currentLabel.state.checked = true;
   // currentViewId = viewId;
   // // getting reference to document loaded into the view
   // currentViewDoc = frameContent[0];
   // // calling setup() function declared in the document
   // //currentViewDoc.ns.setup();
   // //footer.text = viewId;
   // // setting <html state="..."> attribute
   // // so host view can be styled differently for each view (if needed)
   // //self.attributes["state"] = viewId;
 // }

 // self.on("click", "#tabs>label", function() {
   // var viewId = this.attributes["id"];
   // selectView(viewId);
 // })

 
 function self.closing() {
  this.sendEvent("shutdown");
  //db.commit();
  //db.close();
}