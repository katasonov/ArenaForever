
include "libs/settings.tis";
include "libs/progress.tis";

include "config.tis";
include "debug.tis";

include "server.tis"
// include "updates.tis";
// include "login.tis"
// include "lobby.tis"


const Launcher_State_UpdateProgram = 0;
const Launcher_State_UpdateResources = 1;
const Launcher_State_Authorization = 2;
const Launcher_State_UserData = 3;
const Launcher_State_Lobby = 4;
// const Launcher_State_Main = 2; //select player model and map to play.
// const Launcher_State_ConnectToGame = 3;
//const Launcher_State_Main = 1; //select player model and map to play.


 //const tabs = $(div#tabs);
 //const frameContent = $(frame#content);
 const footer = $(footer);

 var currentViewId = null;
 var currentViewDoc = null;
 var currentLabel = null;
 
var currentFrameId = "";

var waitingProgressActive = false;



var launcherState = Launcher_State_UpdateProgram;

$(body).on("on-change-state", function (e) {
	launcherState = e.data;
	if (e.data == Launcher_State_UpdateProgram)
	{
		var parent = $(#LauncherFooterBody);
		if (parent.length > 0)
			parent.clear();
		parent.$append({Progress_Create("UpdateProgramProgress")});
		Common_ShowContent($(#LauncherContentUpdate));
	}
	if (e.data == Launcher_State_UpdateResources)
	{
		var parent = $(#LauncherFooterBody);
		if (parent.length > 0)
			parent.clear();
		parent.$append({Progress_Create("UpdateResourcesProgress")});
		Common_ShowContent($(#LauncherContentUpdate));
	}
	if (e.data == Launcher_State_Authorization)
	{
		var parent = $(#LauncherFooterBody);
		if (parent.length > 0)
			parent.clear();
		//parent.$append({Progress_Create("UpdateResourcesProgress")});
		
		//Hide all content items		
		Common_ShowContent($(#LauncherContentAutorization));
	}
	if (e.data == Launcher_State_UserData)
	{
		Common_StopWaitingProgress();
		var parent = $(#LauncherFooterBody);
		if (parent.length > 0)
			parent.clear();
		//parent.$append({Progress_Create("UpdateResourcesProgress")});
		
		Common_ShowContent($(#LauncherContentUserInfo));
		
		//Check fields correctness
		self.timer(1000ms, function() {
			if (launcherState != Launcher_State_UserData)
			{
				return false;
			}
			
			
			Common_CheckNickNameIsValid();
			
			return true;
		});
	}
	if (e.data == Launcher_State_Lobby)
	{
		Common_StopWaitingProgress();
		var parent = $(#LauncherFooterBody);
		if (parent.length > 0)
			parent.clear();
		//parent.$append({Progress_Create("UpdateResourcesProgress")});
		
		//Hide all content items
		Common_ShowContent($(#LauncherContentLobby));
		Lobby_Reload();
		Debug_Println("Lobby loading...");
		
	}
});

function Lobby_Reload()
{	
	Common_StartWaitingProgress();
	Lobby_ReloadModels();
	Lobby_ReloadMaps();
	
	self.timer(1000ms, function() {
		if (Lobby_Loaded())
		{
			Common_StopWaitingProgress();
			return false;
		}
		return true;
	});	
}

function Lobby_Loaded()
{
	return $(#ModelBoxContent).attributes["loaded"] && $(#MapBoxContent).attributes["loaded"];	
}

async function Lobby_ReloadModels()
{
	try
	{
		var data = JSON.parse(await Server_GetPlayerModelsList());
		Debug_Println(String.printf("Lobby_ReloadModels: data: %V", data));
		var links = new Array();
		for (var it in data)
		{			
			links.push(it["ThumbnailUrl"]);	
		}
		Debug_Println("Lobby_ReloadModels: Links: %V", links);

		Gallery_Reload($(#ModelBoxContent), "ModelBoxItem_", Common_SelectModel, links);
	}
	catch(e)
	{
		Debug_Println(String.printf("Lobby_ReloadModels: Failed:  %V", e));
		self.timer(1000ms, function() {
			Lobby_ReloadModels();	
		});		
	}
}


async function Lobby_ReloadMaps()
{
	try
	{
		var data = JSON.parse(await Server_GetPlayerMapsList());
		Debug_Println(String.printf("Lobby_ReloadMaps: data: %V", data));
		var links = new Array();
		for (var it in data)
		{			
			links.push(it["ThumbnailUrl"]);	
		}
		Debug_Println("Lobby_ReloadMaps: Links: %V", links);

		Gallery_Reload($(#MapBoxContent), "MapBoxItem_", Common_SelectMap, links);
	}
	catch(e)
	{
		Debug_Println(String.printf("Lobby_ReloadMaps: Failed:  %V", e));
		self.timer(1000ms, function() {
			Lobby_ReloadMaps();	
		});		
	}

}

function Gallery_Reload(galleryObj, itemIdPrefix, onItemClickFunc, links)
{
	Debug_Println("Gallery_Reload do");
	var select = "selected";
	var i = 0;
	galleryObj.attributes["loaded"] = false;
	galleryObj.clear();
	
	if (links.length > 0) 
	{
		for(var link in links)
		{
			var el = $(#GalleryBoxItemTemplate).clone();	
			
			el.attributes["id"] = String.$({itemIdPrefix}{i++});
			
			el[0].attributes["src"] = link; 
			
			el.attributes["state"] = select;
			select = "free";
			
			el.on("click", function () {
				onItemClickFunc(el.id);
			});
			
			//Debug_Println(String.printf("Got data %V", link));
			galleryObj.append(el);
		}
	}		
	galleryObj.attributes["loaded"] = true;
	Debug_Println("Gallery_Reload done");

}



function Common_SelectModel(modID)
{
	for (var el in $(#ModelBoxContent).$$(.gallery-box-item))
	{
		el.attributes["state"] = "free";
	}
	
	var item = $([id={modID}]);
	
	Debug_Println(String.printf("Model to select: %V %V", modID, item));
	item.attributes["state"] = "selected";
}

function Common_SelectMap(mapID)
{
	for (var el in $(#MapBoxContent).$$(.gallery-box-item))
	{
		el.attributes["state"] = "free";
	}
	
	var item = $([id={mapID}]);
	
	Debug_Println(String.printf("Map to select: %V %V", mapID, item));
	item.attributes["state"] = "selected";
}

function Common_CheckNickNameIsValid()
{
	var text = $(#NickNameTextbox).value;
	
	var errFound = false;
	for (var i = 0; i < text.length; i++)
	{
		if (!Common_ValidNickNameCharacter(text[i]))
		{
			errFound = true;
			
		}
	}

	if (text.length < 6)
	{
		errFound = true;
	}

	if (errFound)
	{
		$(#NickNameError).style#visibility = "visible";
	}
	else 
	{
		$(#NickNameError).style#visibility = "collapse";
	}

	return !errFound;
}

$(#AgeCheckbox).on("click", function (e){
	
	if ($(#AgeCheckbox).checked == false)
	{
		$(#AgeError).style#visibility = "visible";
	}
	else
	{
		$(#AgeError).style#visibility = "collapse";
	}
	
	
});

$(#UserDataConfirmButton).on("click", function (e){
	
	if (!Common_CheckNickNameIsValid())
	{
		return;
	}
	if ($(#AgeCheckbox).checked == false)
	{
		$(#AgeError).style#visibility = "visible";
		return;
	}
	
	if (!cfgIsNative)
	{
		Common_StartWaitingProgress();		
		return;
	}
	
});

function Common_ValidNickNameCharacter(ch)
{
	// return ((ch >= 'a' && ch <= 'Z') || (ch >= '0' && ch <= '9') || (ch == '-') || (ch == '.') || (ch == '+') || (ch == '_'));
	
	return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9') || (ch == '-') || (ch == '.') || (ch == '+') || (ch == '_');		
}


function Common_ShowContent(cont)
{
	Common_HideContentItems();
	cont.style#visibility = "visible";
}

function Common_HideContentItems()
{
	var size = $$([class = "content"]).length;
	var i = 0;
	for (var (pos, a) in $$([class = "content"]))
	{
		a.style#visibility = "collapse";
	}		
}

$(body).on("on-progress", function (e) {
	
	//Debug_Println(String.$(on-progress: {e.data["progress"]}));
	Progress_Set(e.data["progress"], e.data["text"]);
	// switch (e.data) {
		// case #UpdatesFrame:
		// {			
			// setFrame(#LoginFrame);
			// break;
		// }
		// case #LoginFrame:
		// {
			// setFrame(#LobbyFrame);
			// break;
		// }
	// }
});


$(body).on("frame-finished", function (e) {
	
	Debug_Println(String.$({e.data}: finished));
	switch (e.data) {
		case #UpdatesFrame:
		{			
			setFrame(#LoginFrame);
			break;
		}
		case #LoginFrame:
		{
			setFrame(#LobbyFrame);
			break;
		}
	}
	
});

function Common_SetWindowSize(width, height)
{
    
    var (sx,sy,sw,sh) = View.screenBox(0,#workarea,#rectw);
    
    var w = self.toPixels(width, #width);
    var h = self.toPixels(height, #height);
    
    view.move( sx + (sw - w) / 2, sy + (sh - h) / 2, w,h, true );
	
}

$(#VKLoginButton).on("click", function(e){
	if (cfgIsNative)
		Sciter.launch(View.api.vk_oauth_uri());
	else
		Sciter.launch("http://127.0.0.1/login");
	
	Common_StartWaitingProgress();
});

function Common_StartWaitingProgress()
{
	var size = $$([class = "content"]).length;
	var i = 0;
	for (var (pos, a) in $$([class = "content"]))
	{
		if (a.style#visibility == "visible")
		{
			a.style#filter = "opacity(10%)";
			a.state.disabled = true;
			//a.state.busy = true;
		
		}
	}
	
	$(#RandomProgress).style#visibility = "visible";
	waitingProgressActive = true;
}

function Common_StopWaitingProgress()
{
	var size = $$([class = "content"]).length;
	var i = 0;
	for (var (pos, a) in $$([class = "content"]))
	{
		if (a.style#visibility == "visible")
		{
			a.style#filter = "opacity(100%)";
			a.state.disabled = false;			
		}
	}
	
	$(#RandomProgress).style#visibility = "collapse";
	
	waitingProgressActive = false;
}

function Common_IsWaitingProgress()
{
	return waitingProgressActive;
}

function self.ready() 
{
	//view.isResizeable = false;
	
	if( !view.api && view.nativeApi)
	  view.api = view.nativeApi(); 
	  
	Settings.restore();
	
	view.settings = Settings.fetch();


	
	Common_SetWindowSize(Screen_Width, Screen_Height);
	
	

	//Set Progress position
	$(#RandomProgress).style#left= Screen_Width/2 - $(#RandomProgress).style#width;
	$(#RandomProgress).style#top= Screen_Height/2 - $(#RandomProgress).style#height;
	//$(#RandomProgress).style#left= Screen_Width - $(#RandomProgress).style#width - 70;
	//$(#RandomProgress).style#top= $(#RandomProgress).style#height + 28;
	

	//$(body).sendEvent("on-change-state", Launcher_State_UpdateProgram);
	$(body).sendEvent("on-change-state", Launcher_State_Lobby);

	//Test Interface
	if (!cfgIsNative)
	{
		var testCounter = 0;
		self.timer(100ms, function() {
			if (launcherState == Launcher_State_UpdateProgram)
			{
				testCounter = testCounter + 10;
				if (testCounter > 100) 
				{
					testCounter = 0;
					//launcherState = Launcher_State_UpdateProgram;
					$(body).sendEvent("on-change-state", Launcher_State_UpdateResources);
					return true;
				}
				$(body).postEvent("on-progress", {"progress": testCounter, "text": "Обновление программы (1Мб из 10Мб / 4кб/сек)"});
			}
			if (launcherState == Launcher_State_UpdateResources)
			{
				testCounter = testCounter + 10;
				if (testCounter > 100) 
				{
					//launcherState = Launcher_State_UpdateProgram;
					testCounter = 0;
					$(body).sendEvent("on-change-state", Launcher_State_Authorization);
					return true;
				}
				$(body).postEvent("on-progress", {"progress": testCounter, "text": "Загрузка 'pak0.pk3' (1Мб из 70Мб / 4кб/сек)"});
			}			
			if (launcherState == Launcher_State_Authorization)
			{
				if (Common_IsWaitingProgress())
					testCounter = testCounter + 1;
				if (testCounter > 20) 
				{
					testCounter = 0;
					//launcherState = Launcher_State_UpdateProgram;
					
					$(body).sendEvent("on-change-state", Launcher_State_UserData);
					return true;
				}
				//$(body).postEvent("on-progress", {"progress": testCounter, "text": "Загрузка 'pak0.pk3' (1Мб из 70Мб / 4кб/сек)"});
			}
			if (launcherState == Launcher_State_UserData)
			{
				if (Common_IsWaitingProgress())
					testCounter = testCounter + 1;
				if (testCounter > 20) 
				{
					testCounter = 0;
					//launcherState = Launcher_State_UpdateProgram;
					
					$(body).sendEvent("on-change-state", Launcher_State_Lobby);
					return true;
				}
				//$(body).postEvent("on-progress", {"progress": testCounter, "text": "Загрузка 'pak0.pk3' (1Мб из 70Мб / 4кб/сек)"});
			}				
			return true;
		});			
	}

	//setFrame("UpdatesFrame");
	
	
	// self.timer(1000ms, function() {
				// UpdatesDo();
				// LoginDo();
				// //LobbyDo();
				// return true; // Repeat again!
	 // });	



	//view.msgbox(#alert,  false);
	//var needCheckUpdates = true; 
	
	//selectView("updates/updates");
	/*pathname = dbPathFromArgs() || settings.dbpath || System.path(#USER_DOCUMENTS,DBNAME);
	if(checkDatabase(pathname)) 
	{
	  if( View.db = openDatabase(pathname) ) {
		view.load(self.url("main.htm")); 
		return;
	  }
	}
	var body = $(body);
	body.attributes.addClass("presented");
	body.value = {
	  name: Sciter.userName(),
	  defloc: pathname.trim()
	};*/
}


function setFrame(frameId)
{
	currentFrameId = frameId;
	for(var frameItem in $$(.frame)) {
		if (frameId != frameItem.id)
		{
			frameItem.style#visibility = "collapse";
		}
		else
		{
			frameItem.style#visibility = "visible";		
			frameItem.postEvent("show");
		}
		
 // to hide and
    // toolbarItem.state.expanded = true; // to show
	}
	return "OK";
}

 // function selectView(viewId) {
   // if( currentLabel )
	 // currentLabel.state.checked = false; // deselect previous

   // frameContent.load(viewId + ".htm");
   // //currentLabel = $(#tabs > label#{viewId});
   // //currentLabel.state.checked = true;
   // currentViewId = viewId;
   // // getting reference to document loaded into the view
   // currentViewDoc = frameContent[0];
   // // calling setup() function declared in the document
   // //currentViewDoc.ns.setup();
   // //footer.text = viewId;
   // // setting <html state="..."> attribute
   // // so host view can be styled differently for each view (if needed)
   // //self.attributes["state"] = viewId;
 // }

 // self.on("click", "#tabs>label", function() {
   // var viewId = this.attributes["id"];
   // selectView(viewId);
 // })

 
 function self.closing() {
  this.sendEvent("shutdown");
  //db.commit();
  //db.close();
}